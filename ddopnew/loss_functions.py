# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_loss_functions.ipynb.

# %% auto 0
__all__ = ['pinball_loss', 'quantile_loss']

# %% ../nbs/01_loss_functions.ipynb 3
from typing import Union, Optional

import numpy as np
from .utils import Parameter, check_parameter_types

import torch
import torch.nn as nn
import torch.nn.functional as F

# %% ../nbs/01_loss_functions.ipynb 5
def pinball_loss(
            Y_true: np.ndarray,
            Y_pred: np.ndarray,
            underage_cost: Union[Parameter, np.ndarray],
            overage_cost: Union[Parameter, np.ndarray],
            ) -> np.ndarray:

    if isinstance(underage_cost, Parameter):
        underage_cost = underage_cost.get_value()
    if isinstance(overage_cost, Parameter):
        overage_cost = overage_cost.get_value()
    
    check_parameter_types(Y_true, Y_pred, underage_cost, overage_cost)
    
    loss = np.maximum(Y_true - Y_pred, 0) * underage_cost + np.maximum(Y_pred - Y_true, 0) * overage_cost

    return loss

# %% ../nbs/01_loss_functions.ipynb 6
def quantile_loss(
                Y_true: np.ndarray,
                Y_pred: np.ndarray,
                quantile: Union[float, Parameter],
                ) -> np.ndarray:

    if isinstance(quantile, Parameter):
        quantile = quantile.get_value()

    check_parameter_types(Y_true, Y_pred, quantile)
    
    # assert shapes
    assert Y_true.shape == Y_pred.shape, "y_true and y_pred must have the same shape"
    
    loss = np.maximum((Y_true - Y_pred) * quantile, (Y_pred - Y_true) * (1 - quantile))

    return loss
