# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/10_dataloaders/11_distribution_loaders.ipynb.

# %% auto 0
__all__ = ['NormalDistributionDataloader']

# %% ../../nbs/10_dataloaders/11_distribution_loaders.ipynb 3
import numpy as np
from abc import ABC, abstractmethod
from typing import Union

from .base import BaseDataLoader

# %% ../../nbs/10_dataloaders/11_distribution_loaders.ipynb 4
class NormalDistributionDataloader(BaseDataLoader):
    
    def __init__(self,
        mean: float,
        std: float,
        num_SKUs: int,
        truncated_low: int = 0,
        truncated_high: int = None
    ):
        self.num_SKUs = num_SKUs
        self.mean = mean
        self.std = std
        self.truncated_low = truncated_low
        self.truncated_high = truncated_high

        super().__init__()
    
    def __getitem__(self, idx):
        
        Y = np.random.normal(self.mean, self.std, self.num_SKUs)

        if self.truncated_low is not None:
            Y = np.maximum(Y, self.truncated_low)
        if self.truncated_high is not None:
            Y = np.minimum(Y, self.truncated_high)
        
        return None, Y

    def __len__(self):
        raise ValueError('Length of a distribution is not defined')
    
    @property
    def X_shape(self):
        return None
    
    @property
    def Y_shape(self):
        return (1, self.num_SKUs)
