# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/21_envs_inventory/00_inventory_utils.ipynb.

# %% auto 0
__all__ = ['OrderPipeline']

# %% ../../../nbs/21_envs_inventory/00_inventory_utils.ipynb 3
from abc import ABC, abstractmethod
from typing import Union, Tuple

from ..base import BaseEnvironment
from ...utils import Parameter, MDPInfo
from ...dataloaders.base import BaseDataLoader
from ...loss_functions import pinball_loss

import gymnasium as gym

import numpy as np
import time

# %% ../../../nbs/21_envs_inventory/00_inventory_utils.ipynb 4
class OrderPipeline():
    """
    Class to handle the order pipeline in the inventory environments. It is used to keep track of the orders
    that are placed. It can account for fixed and variable lead times.
    
    """

    def __init__(self, 

        num_units: int,  # number of units (SKUs)
        lead_time_mean: list[object] | None = None,  # default is empty list
        
        max_lead_time: list[object] | None = None,  # maximum lead time in case of stochastic lead times

        ) -> None:

        if max_lead_time is None:
            self.max_lead_time = lead_time_mean
        else:
            self.max_lead_time = max_lead_time

        self.pipeline = np.zeros((np.max(max_lead_time), num_units))

    def step(self, 
        orders: np.ndarray,
        ) -> np.ndarray:
        
        """ Add orders to the pipeline and return the orders that are arriving """

