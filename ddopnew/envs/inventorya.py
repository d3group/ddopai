# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/21_envs_inventory/00_base_inventory_env.ipynb.

# %% auto 0
__all__ = ['BaseInventoryEnv']

# %% ../../nbs/21_envs_inventory/00_base_inventory_env.ipynb 3
import numpy as np
from ..utils import MDPInfo

import gymnasium as gym
from typing import Union

from .base import BaseEnvironment

# %% ../../nbs/21_envs_inventory/00_base_inventory_env.ipynb 4
class BaseInventoryEnv(BaseEnvironment):
    def __init__(self, mdp_info: MDPInfo) -> None:
        """
        Constructor.

        Args:
            mdp_info (MDPInfo): the information of the environment;
            kwargs (dict): the keyword arguments to set the environment.

        # TODO check if this class is necessary
            
        """
        super().__init__(mdp_info)
    
    def set_observation_space(self, shape: tuple, low: Union[np.ndarray, float] = -np.inf, high: Union[np.ndarray, float] = np.inf) -> None:
        '''
        Set the observation space of the environment.
        This is a standard function for simple observation spaces. For more complex observation spaces,
        this function should be overwritten. Note that it is assumped that the first dimension
        is the n_samples that is not relevant for the observation space.

        '''
        if shape is not None:
            if not isinstance(shape, tuple):
                raise ValueError("Shape must be a tuple.")
            
            shape = shape[1:] # assumed that the first dimension is the number of samples

            self.observation_space = gym.spaces.Box(low=low, high=high, shape=shape, dtype=np.float32)
        else:
            self.observation_space = None

    def set_action_space(self, shape: tuple, low: Union[np.ndarray, float] = 0, high: Union[np.ndarray, float] = np.inf) -> None:
        '''
        Set the action space of the environment.
        This is a standard function for simple action spaces. For more complex action spaces,
        this function should be overwritten. Note that it is assumped that the first dimension
        is the n_samples that is not relevant for the action space.

        '''
        if not isinstance(shape, tuple):
            raise ValueError("Shape must be a tuple.")
        
        shape = shape[1:] # assumed that the first dimension is the number of samples

        self.action_space = gym.spaces.Box(low=low, high=high, shape=shape, dtype=np.float32)
    
    def get_observation(self):
        """
        Return the current observation. This function is for the simple case where the observation
        is only an x,y pair. For more complex observations, this function should be overwritten.

        """
        X_item, Y_item = self.dataloader[self.index]
        return X_item, Y_item
